include:
  - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'


stages:
  - check
  - build
  - test
  - upload
  - release


variables:
  PIO_PROJ_FOLDER: keycard-access
  GIT_SUBMODULE_STRATEGY: normal
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PIO_PROJ_FOLDER}/${CI_COMMIT_TAG}"
  #                                                                    Release name: ^^^^^^^^^^^^^^^^^^

.pio-cache: &pio-cache
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - "${PIO_PROJ_FOLDER}/.pio"

.rules-changes-sources: &rules-changes-sources
  changes:
    - ${PIO_PROJ_FOLDER}/src/**/*
    - ${PIO_PROJ_FOLDER}/include/**/*
    - ${PIO_PROJ_FOLDER}/lib/**/*
    - ${PIO_PROJ_FOLDER}/test/**/*
    - ${PIO_PROJ_FOLDER}/platformio.ini

.rules-changes-cicd: &rules-changes-cicd
  changes:
    - cicd/*
    - .gitlab-ci.yml

.rules-merge-to-master: &rules-merge-to-master
  if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'
  when: always


check format:
  stage: check
  image: alpine:3.17
  allow_failure: true
  before_script:
    - apk add --update --no-cache git clang clang-extra-tools
  script:
    - cd "${PIO_PROJ_FOLDER}"
    - >
      find . -not -path '*/\.*' -and -not -path './components/*' -and -not -path './lib/_*' -and \( -name '*.[hc]' -or -name '*.[hc]pp' \) | while read -r FILE; do
          echo "Formatting $FILE"
          clang-format --style file -i "$FILE"
      done
    - cd ..
    - git diff --patch | tee 0001-Clang-format.patch
    - test ! -s 0001-Clang-format.patch
  artifacts:
    paths:
      - 0001-Clang-format.patch
    expire_in: 1 week
    when: on_failure
  rules:
    # Run always, on merge request too
    - when: always

.build-template: &build-template
  stage: build
  image: ${CI_REGISTRY}/proj/testinator/esp32:latest
  <<: *pio-cache
  before_script:
    - cd "${PIO_PROJ_FOLDER}"
    # Remove the cached firmwares to ensure we will rebuild
    - rm -f .pio/build/${PIO_ENV}/firmware.{bin,elf}
  artifacts:
    paths:
      - "${PIO_PROJ_FOLDER}/.pio/build/project.checksum"  # Without this, `pio run` deletes the firmware
      - "${PIO_PROJ_FOLDER}/.pio/build/${PIO_ENV}/firmware.bin"
      - "${PIO_PROJ_FOLDER}/.pio/build/${PIO_ENV}/firmware.elf"


build test firmware:
  <<: *build-template
  script:
    - pio test -e ${PIO_ENV} -vv --without-uploading --without-testing
  rules:
    - when: always
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    PIO_ENV: cicdmachine


build esp32 app firmware:
  <<: *build-template
  script:
    - pio run -e ${PIO_ENV}
  rules:
    - when: always
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    PIO_ENV: esp32


test hardware:
  stage: test
  image: ${CI_REGISTRY}/proj/testinator/esp32:latest
  tags:
    - pn532
  dependencies:
    - build test firmware
  before_script:
    - cd "${PIO_PROJ_FOLDER}"
  script:
    # Make two attempts at uploading.
    - pio test -e cicdmachine --without-building --without-testing -vv || pio test -e cicdmachine --without-building --without-testing -vv
    - pio test -e cicdmachine --without-building --without-uploading -vv
  rules:
    # Run always, on merge request too
    - <<: *rules-merge-to-master
    # But skip by default if the sources did not change
    - <<: *rules-changes-sources
    - <<: *rules-changes-cicd


.upload-template: &upload-template
  stage: upload
  image: curlimages/curl:latest
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_BRANCH == "master"'
  script:
    # The package will be releases as Release-PioEnvironment-Tag.Extension, e.g. keycard-access-esp32-1.0.4-beta1.elf
    - >
      for EXTENSION in bin elf; do
        curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
          --upload-file "${PIO_PROJ_FOLDER}/.pio/build/${PIO_ENV}/firmware.${EXTENSION}" \
          "${PACKAGE_REGISTRY_URL}/${PIO_PROJ_FOLDER}-${PIO_ENV}-${CI_COMMIT_TAG}.${EXTENSION}"
      done


upload esp32 app firmware:
  <<: *upload-template
  dependencies:
    - build esp32 app firmware
  variables:
    PIO_ENV: esp32


release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  dependencies:
    # NOTE: explicitly list all environments here for which to create a release
    - upload esp32 app firmware
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_BRANCH == "master"'
  script:
    # NOTE: explicitly list all environments here for which to create a release, both elf and bin
    - |
      release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG \
        --assets-link "{\"name\":\"${PIO_PROJ_FOLDER}-esp32-${CI_COMMIT_TAG}.elf\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PIO_PROJ_FOLDER}-esp32-${CI_COMMIT_TAG}.elf\"}" \
        --assets-link "{\"name\":\"${PIO_PROJ_FOLDER}-esp32-${CI_COMMIT_TAG}.bin\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PIO_PROJ_FOLDER}-esp32-${CI_COMMIT_TAG}.bin\"}"
