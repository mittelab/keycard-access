include:
  - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'


stages:
  - check
  - build
  - test
  - upload
  - release


variables:
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic"

.rules-merge-to-master: &rules-merge-to-master
  if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'
  when: always


check format:
  stage: check
  image: alpine:3.17
  allow_failure: true
  before_script:
    - apk add --update --no-cache git clang clang-extra-tools
  script:
    - >
      find . \( -path './components/*' -or -path './tests/*' -or -path './main/*' \) -and \( -name '*.[hc]' -or -name '*.[hc]pp' \) | while read -r FILE; do
          echo "Formatting $FILE"
          clang-format --style file -i "$FILE"
      done
    - git diff --patch | tee 0001-Clang-format.patch
    - test ! -s 0001-Clang-format.patch
  artifacts:
    paths:
      - 0001-Clang-format.patch
    expire_in: 1 week
    when: on_failure
  rules:
    # Run always, on merge request too
    - when: always

.build-template: &build-template
  stage: build
  image: espressif/idf:v5.1.2
  script:
    - idf.py --ccache -C ${PROJ_PATH} -B build-${SUFFIX} build set-target ${TARGET}
    - idf.py --ccache -C ${PROJ_PATH} -B build-${SUFFIX} build
  rules:
    - when: always
  cache:
    key: build-${SUFFIX}-$CI_COMMIT_REF_SLUG
    paths:
      - build-${SUFFIX}
  artifacts:
    paths:
      - build-${SUFFIX}/*.bin
      - build-${SUFFIX}/*.elf
      - build-${SUFFIX}/*/*.bin
      - build-${SUFFIX}/flash_args
      - build-${SUFFIX}/flash_project_args
      - build-${SUFFIX}/flasher_args.json
      - build-${SUFFIX}/config/sdkconfig.json
      - build-${SUFFIX}/**/*.gcno  # Coverage files
  needs: []
  timeout: 30 minutes

build test firmware:
  <<: *build-template
  before_script:
    - cp tests/sdkconfig.defaults sdkconfig.defaults
  variables:
    PROJ_PATH: tests
    SUFFIX: tests
    TARGET: esp32s3


build firmware matrix:
  <<: *build-template
  before_script:
    - cp sdkconfig-${TYPE}.defaults sdkconfig.defaults
  after_script:
    - cd build-${SUFFIX}
    - esptool.py --chip ${TARGET} merge_bin -o firmware.bin @flash_args
  parallel:
    matrix:
      - TYPE: [keymaker, gate]
        TARGET: [esp32, esp32s3]
  variables:
    PROJ_PATH: .
    SUFFIX: ${TYPE}-${TARGET}
    KA_PROJECT_NAME: ${TYPE}


test hardware:
  stage: test
  image: espressif/idf:v5.1.2
  tags:
    - pn532
  dependencies:
    -  build test firmware
  before_script:
    - python /opt/esp/idf/tools/idf_tools.py install-python-env --features=+pytest
  script:
    # $ cd build-${SUFFIX} && esptool.py --chip esp32s3 write_flash @flash_args
    # pytest uploads the image itself, but should it be needed the line above takes are of it
    - export PYTEST_SUITE_NAME=keycard-access-tests
    - pytest -s ${PROJ_PATH}/pytest_main.py --target esp32s3 --build-dir build-${SUFFIX} --junitxml report.xml
  artifacts:
    when: always
    reports:
      junit: report.xml
  variables:
    PROJ_PATH: tests
    SUFFIX: tests
  rules:
    # Run always, on merge request too
    - <<: *rules-merge-to-master


.release-tags-only: &release-tags-only
  rules:
    # Match all v<semantic_version> tags, and use everything after it as the release version
    # Regex just copied from semver.org
    - if: $CI_COMMIT_TAG =~ /^v(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/


upload firmware matrix:
  <<: *release-tags-only
  stage: upload
  image: curlimages/curl:latest
  script:
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
        --upload-file "build-${SUFFIX}/ka-${TYPE}.bin" \
        "${PACKAGE_REGISTRY_URL}/keycard-access/${CI_COMMIT_TAG}/ka-${SUFFIX}-${CI_COMMIT_TAG}.ota"
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
        --upload-file "build-${SUFFIX}/firmware.bin" \
        "${PACKAGE_REGISTRY_URL}/keycard-access/${CI_COMMIT_TAG}/ka-${SUFFIX}-${CI_COMMIT_TAG}.bin"
  parallel:
    matrix:
      - TYPE: [keymaker, gate]
        TARGET: [esp32, esp32s3]
  variables:
    SUFFIX: ${TYPE}-${TARGET}
  dependencies:
    - build firmware matrix


release:
  <<: *release-tags-only
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  dependencies:
    - upload firmware matrix
  script:
    - echo Performing automatic release
  release:
    tag_name: $CI_COMMIT_TAG
    name: "Release $CI_COMMIT_TAG"
    description: "Automated release. $CI_COMMIT_TAG_MESSAGE"
    assets:
      links:
        - name: ka-keymaker-esp32-${CI_COMMIT_TAG}.ota
          url: "${PACKAGE_REGISTRY_URL}/keycard-access/${CI_COMMIT_TAG}/ka-keymaker-esp32-${CI_COMMIT_TAG}.ota"
        - name: ka-keymaker-esp32-${CI_COMMIT_TAG}.bin
          url: "${PACKAGE_REGISTRY_URL}/keycard-access/${CI_COMMIT_TAG}/ka-keymaker-esp32-${CI_COMMIT_TAG}.bin"
        - name: ka-keymaker-esp32s3-${CI_COMMIT_TAG}.ota
          url: "${PACKAGE_REGISTRY_URL}/keycard-access/${CI_COMMIT_TAG}/ka-keymaker-esp32s3-${CI_COMMIT_TAG}.ota"
        - name: ka-keymaker-esp32s3-${CI_COMMIT_TAG}.bin
          url: "${PACKAGE_REGISTRY_URL}/keycard-access/${CI_COMMIT_TAG}/ka-keymaker-esp32s3-${CI_COMMIT_TAG}.bin"
        - name: ka-gate-esp32-${CI_COMMIT_TAG}.ota
          url: "${PACKAGE_REGISTRY_URL}/keycard-access/${CI_COMMIT_TAG}/ka-gate-esp32-${CI_COMMIT_TAG}.ota"
        - name: ka-gate-esp32-${CI_COMMIT_TAG}.bin
          url: "${PACKAGE_REGISTRY_URL}/keycard-access/${CI_COMMIT_TAG}/ka-gate-esp32-${CI_COMMIT_TAG}.bin"
        - name: ka-gate-esp32s3-${CI_COMMIT_TAG}.ota
          url: "${PACKAGE_REGISTRY_URL}/keycard-access/${CI_COMMIT_TAG}/ka-gate-esp32s3-${CI_COMMIT_TAG}.ota"
        - name: ka-gate-esp32s3-${CI_COMMIT_TAG}.bin
          url: "${PACKAGE_REGISTRY_URL}/keycard-access/${CI_COMMIT_TAG}/ka-gate-esp32s3-${CI_COMMIT_TAG}.bin"
